pipeline {
    agent any
    tools {
        terraform 'terraform-Rag'
    }
    parameters {
        string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        choice choices: ['AWS', 'AZURE', 'OracleCloud'], description: '''Select the cloud platform
        ''', name: 'Cloud'
        choice choices: ['us-west-1', 'ap-south-1', 'eu-central-1'], description: '''Select the region
        ''', name: 'Region'
        choice choices: ['t2.micro', 't2.small', 't2.medium'], description: '''Select the appropriate instance type. 
        For more information 
        https://aws.amazon.com/ec2/instance-types/ 
        ''', name: 'Configuration'
        string defaultValue: '', description: 'Input server Name', name: 'ServerName', trim: false

        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS-ACCESS-KEY-ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS-SECRET-KEY')
        TF_IN_AUTOMATION      = '1'
    }

    stages {
        stage('Git Checkout'){
                steps{
                   git credentialsId: 'GITHUB-RAGEH', url: 'https://github.com/Rageshmookoth/iac-demo'
                }
            }
        stage('Plan') {
            steps {
                script {
                    currentBuild.displayName = params.version
                }
                sh 'terraform init -input=false'
                sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var 'region=${params.Region}' -var 'instance_type=${params.Configuration}' -var 'instance_name=${params.ServerName}' -var 'cloudprovider=${params.Cloud}'"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                sh "terraform apply -input=false tfplan"
            }
        }
        stage('output') {
            steps {
                sh "export ip=`cat /tmp/inventory`"
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'tfplan.txt'
        }
    }
}